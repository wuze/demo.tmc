{
  "name": "vue-hot-reload-api",
  "version": "2.0.8",
  "description": "hot reload api for *.vue components",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/vuejs/vue-hot-reload-api.git"
  },
  "keywords": [
    "vue",
    "hot",
    "reload"
  ],
  "author": {
    "name": "Evan You"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/vuejs/vue-hot-reload-api/issues"
  },
  "homepage": "https://github.com/vuejs/vue-hot-reload-api#readme",
  "readme": "# vue-hot-reload-api\n\n> Note: `vue-hot-reload-api@2.x` only works with `vue@2.x`\n\nHot reload API for Vue components. This is what [vue-loader](https://github.com/vuejs/vue-loader) and [vueify](https://github.com/vuejs/vueify) use under the hood.\n\n## Usage\n\nYou will only be using this if you are writing some build toolchain based on Vue components. For normal application usage, just use `vue-loader` or `vueify`.\n\n``` js\n// define a component as an options object\nconst myComponentOptions = {\n  data () { ... },\n  created () { ... },\n  render () { ... }\n}\n\n// assuming Webpack's HMR API.\n// https://webpack.github.io/docs/hot-module-replacement.html\nif (module.hot) {\n  const api = require('vue-hot-reload-api')\n  const Vue = require('vue')\n\n  // make the API aware of the Vue that you are using.\n  // also checks compatibility.\n  api.install(Vue)\n\n  // compatibility can be checked via api.compatible after installation\n  if (!api.compatible) {\n    throw new Error('vue-hot-reload-api is not compatible with the version of Vue you are using.')\n  }\n\n  // indicate this module can be hot-reloaded\n  module.hot.accept()\n\n  if (!module.hot.data) {\n    // for each component option object to be hot-reloaded,\n    // you need to create a record for it with a unique id.\n    // do this once on startup.\n    api.createRecord('very-unique-id', myComponentOptions)\n  } else {\n    // if a component has only its template or render function changed,\n    // you can force a re-render for all its active instances without\n    // destroying/re-creating them. This keeps all current app state intact.\n    api.rerender('very-unique-id', myComponentOptions)\n\n    // --- OR ---\n\n    // if a component has non-template/render options changed,\n    // it needs to be fully reloaded. This will destroy and re-create all its\n    // active instances (and their children).\n    api.reload('very-unique-id', myComponentOptions)\n  }\n}\n```\n\n## License\n\n[MIT](http://opensource.org/licenses/MIT)\n",
  "readmeFilename": "README.md",
  "_id": "vue-hot-reload-api@2.0.8",
  "dist": {
    "shasum": "bb0159e32694a863c639994ea6064355facf5554"
  },
  "_from": "vue-hot-reload-api@^2.0.1",
  "_resolved": "https://registry.npmjs.org/vue-hot-reload-api/-/vue-hot-reload-api-2.0.8.tgz"
}
